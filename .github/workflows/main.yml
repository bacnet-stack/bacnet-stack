name: CMake

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
        project: [root, test]
        exclude:
          # Currently does not build. Need to be fixed at some point.
          - os: windows-latest
            project: test
  
    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.project == 'root'
      run: |
        sudo apt-get update
        # apps/router needs libconfig-dev.
        sudo apt-get install -y libconfig-dev
  
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        if [ "${{ matrix.project }}" == "test" ]; then
          source_dir=$GITHUB_WORKSPACE/test
        else
          source_dir=$GITHUB_WORKSPACE
        fi

        cmake_options="-DCMAKE_COMPILE_WARNING_AS_ERROR=ON"
  
        # Compile as much as possible to at least compile test code.
        c_flags="$c_flags -DBACFILE=ON"
        c_flags="$c_flags -DPRINT_ENABLED=1"
        c_flags="$c_flags -DBACNET_TIME_MASTER=ON"
        c_flags="$c_flags -DBACAPP_COLOR_RGB_CONVERSION_ENABLED=ON"
        cmake_options="$cmake_options -DCMAKE_C_FLAGS=$c_flags"

        # TODO: Add BACDL_BIP6=ON when it builds withous errors.
        cmake_options="$cmake_options -DBACDL_BIP=ON"
        cmake_options="$cmake_options -DBACNET_PROTOCOL_REVISION=24"

        if [[ "$RUNNER_OS" != "macOS" ]]; then
          # Apple does not have port yet for this.
          cmake_options="$cmake_options -DBACDL_MSTP=ON"
        fi

        if [[ "$RUNNER_OS" == "Linux" ]]; then
          # Apple nor Windows does not have port yet for this.
          cmake_options="$cmake_options -DBACDL_ARCNET=ON"

          # Currently Windows fails because of pcab.h not found.
          # Apple does not have port yet for this.
          cmake_options="$cmake_options -DBACDL_ETHERNET=ON"
        fi

        cmake $source_dir -DCMAKE_BUILD_TYPE=$BUILD_TYPE $cmake_options

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
